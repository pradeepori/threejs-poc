{"ast":null,"code":"import * as THREE from 'three';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport * as i0 from \"@angular/core\";\nexport let ThreeDModelsComponent = /*#__PURE__*/(() => {\n  class ThreeDModelsComponent {\n    constructor() {}\n\n    ngOnInit() {\n      this.setSecen();\n    }\n\n    setSecen() {\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 3;\n      camera.position.y = 1;\n      const canvas1 = document.getElementById('vesselCanvas');\n      const renderer = new THREE.WebGLRenderer({\n        canvas: canvas1\n      });\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.addEventListener('change', render);\n      const light = new THREE.HemisphereLight(0xffeeb1, 0x080820, 2);\n      const loader = new GLTFLoader();\n      renderer.setSize(window.innerWidth, window.innerHeight); //     document.body.appendChild(renderer.domElement);\n\n      loader.load('assets/3dModels/Vesselv2.glb', GLTF, XHR);\n      let root;\n\n      function GLTF(GLTF) {\n        root = GLTF.scene;\n        root.scale.set(0.14, 0.14, 0.14);\n        scene.add(root);\n      }\n\n      function XHR(xhr) {\n        console.log(xhr.loader / xhr.total * 100);\n      }\n\n      scene.add(light);\n      const stats = Stats();\n      document.body.appendChild(stats.dom);\n\n      const animate = function () {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n        stats.update();\n\n        if (root?.rotation) {\n          root.rotation.y += 0.01;\n        }\n      };\n\n      renderer.render(scene, camera);\n\n      function render() {\n        renderer.render(scene, camera);\n      }\n\n      animate();\n    }\n\n  }\n\n  ThreeDModelsComponent.ɵfac = function ThreeDModelsComponent_Factory(t) {\n    return new (t || ThreeDModelsComponent)();\n  };\n\n  ThreeDModelsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ThreeDModelsComponent,\n    selectors: [[\"app-three-d-models\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"vesselCanvas\", 1, \"vessel\"]],\n    template: function ThreeDModelsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0);\n      }\n    },\n    styles: [\".engineButton[_ngcontent-%COMP%]{position:absolute;top:2%}\"]\n  });\n  return ThreeDModelsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}